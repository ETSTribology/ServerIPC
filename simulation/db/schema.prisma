generator client {
  provider = "prisma-client-py"
  interface = "sync"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  runs      Run[]
}

model Run {
  id        Int      @id @default(autoincrement())
  configId  Int
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  states    State[]
}

model State {
  id        Int       @id @default(autoincrement())
  runId     Int
  timeStep  Int
  timeElapsed Float
  num_elements Int
  elements  Element[]
  run       Run       @relation(fields: [runId], references: [id], onDelete: Cascade)
}

model Element {
  id             Int           @id @default(autoincrement())
  stateId        Int
  state          State          @relation(fields: [stateId], references: [id], onDelete: Cascade)
  position       Position?      @relation(fields: [positionId], references: [id], onDelete: Cascade)
  positionId     Int?           @unique
  velocity       Velocity?      @relation(fields: [velocityId], references: [id], onDelete: Cascade)
  velocityId     Int?           @unique
  acceleration   Acceleration?  @relation(fields: [accelerationId], references: [id], onDelete: Cascade)
  accelerationId Int?           @unique
}

model Position {
  id      Int       @id @default(autoincrement())
  x       Float
  y       Float
  z       Float
  element Element?  @relation()  // Remove onDelete here
}

model Velocity {
  id      Int       @id @default(autoincrement())
  x       Float
  y       Float
  z       Float
  element Element?  @relation()  // Remove onDelete here
}

model Acceleration {
  id      Int       @id @default(autoincrement())
  x       Float
  y       Float
  z       Float
  element Element?  @relation()  // Remove onDelete here
}
