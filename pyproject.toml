[tool.poetry]
name = "simulation"
version = "0.1.0"
description = "Elastic Simulation of Linear FEM Tetrahedra using IPC with Redis and MinIO integration."
authors = ["Antoine Boucher <antoine.boucher.1@ens.etstml.ca>"]
license = "MIT"
homepage = "https://github.com/ETSTribology/ServerIPC"
repository = "https://github.com/ETSTribology/ServerIPC"
documentation = "https://github.com/ETSTribology/ServerIPC#readme"

[tool.poetry.dependencies]
numpy = "*"
scipy = "*"
meshio = "^5.3.5"
pbatoolkit = "^0.0.10"
libigl = "^2.5.1"
bson = "^0.5.10"
PyYAML = "^6.0.2"
websockets = "^14.1"
grpcio = "^1.68.0"
grpcio-tools = "^1.68.0"
protobuf = "^5.28.1"
jsonschema = "^4.23.0"
minio = "^7.2.12"
uv = "^0.5.2"
surrealdb = "^0.4.0"
poetry = "^1.8.4"
wandb = "^0.18.7"
hydra-core = "^1.3.2"
psycopg2-binary = "^2.9.1"
mysql-connector-python = "^9.1.0"
typer = "^0.9.0"
torch = {version = "^2.2.1", source = "pytorch"}
torchvision = {version = "^0.17.1", source = "pytorch"}
torchaudio = {version = "^2.2.1", source = "pytorch"}
tensorboard = "^2.18.0"

[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/torch_stable.html"
default = false
secondary = true

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-sugar = "^1.0.0"
pytest-xdist = "^3.5.0"
hypothesis = "^6.98.0"
faker = "^24.0.0"
freezegun = "^1.4.0"
black = "^24.2.0"
ruff = "^0.3.0"
isort = "^5.13.0"
pylint = "^3.1.0"
asv = "*"
mkdocs = "*"
mkdocs-material = "*"
mkdocs-bibtex = "*"
mkdocs-jupyter = "*"
mkdocstrings = "*"
mkdocs-include-markdown-plugin = "*"

[tool.poetry.extras]
all = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-sugar",
    "pytest-xdist",
    "hypothesis",
    "faker",
    "freezegun",
    "black",
    "ruff",
    "isort",
    "asv",
    "mkdocs",
    "mkdocs-material",
    "mkdocs-bibtex",
    "mkdocs-jupyter",
    "mkdocstrings",
    "mkdocs-include-markdown-plugin"
]

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
skip = [
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".asv",
    ".benchmark",
]

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"
lint.select = ["E", "F", "B", "I"]
lint.ignore = ["E501", "F841", "B904", "F821", "B017", "B019", "F405", "E741", "B007", "E741", "B024", "B008", "B027"]
exclude = [
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".asv",
    ".benchmark",
]

[tool.flake8]
max-line-length = 100
extend-ignore = "E203,W503"
docstring-convention = "google"
per-file-ignores = [
    "__init__.py:D104",
]

[tool.mypy]
ignore_missing_imports = true
allow_untyped_defs = true

[tool.bandit]
exclude_dirs = ["tests", "venv"]
skips = ["B101"]  # Skip assert used as statements

[tool.pytest.ini_options]
addopts = """
    -v
    --cov=simulation
    --cov=visualization
    --cov-report=term
    --cov-report=html
    --cov-report=xml
"""
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["simulation", "visualization"]
omit = [
    "*/__init__.py",
    "*/tests/*",
    "*/_version.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
show_missing = true
fail_under = 80  # Minimum coverage threshold

[tool.poetry.scripts]
simulation-server = "simulation.server:main"
simulation-client = "simulation.visualization.client:main"
coverage = "python scripts/generate_coverage.py"
test-cov = "pytest --cov=visualization --cov=simulation --cov-report=term --cov-report=html"
